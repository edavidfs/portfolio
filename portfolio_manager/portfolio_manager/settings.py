"""
Django settings for portfolio_manager project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os # Added os import
import dj_database_url # Added dj_database_url import

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# Note: In the Dockerfile, the project structure is /app/manage.py and /app/portfolio_manager/ (settings dir)
# BASE_DIR will correctly resolve to /app/ if settings.py is at /app/portfolio_manager/settings.py
# And manage.py at /app/manage.py.
# However, my ls() output showed manage.py at /app/portfolio_manager/manage.py
# and settings.py at /app/portfolio_manager/portfolio_manager/settings.py
# So BASE_DIR = Path(__file__).resolve().parent.parent should point to /app/portfolio_manager/
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Read SECRET_KEY from environment variable, with a default for local development (not for production)
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-_gnxkd1tuxwg5l@yf_8-i7km_tuyfi(aq!v_*v39o)5@hgxw-v_fallback')

# SECURITY WARNING: don't run with debug turned on in production!
# Read DEBUG from environment variable, defaulting to 'True' for local development
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = []
# For production, ALLOWED_HOSTS should be set via an environment variable
# Example: ALLOWED_HOSTS_CSV = os.environ.get('ALLOWED_HOSTS_CSV')
# if ALLOWED_HOSTS_CSV:
#     ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_CSV.split(',')]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'portfolio',
    'accounts',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'portfolio_manager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'portfolio_manager.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Default to SQLite if DATABASE_URL is not set
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3', # BASE_DIR should be /app/portfolio_manager/ for this to work
                                        # if db.sqlite3 is expected at /app/portfolio_manager/db.sqlite3
    }
}

DATABASE_URL = os.environ.get('DATABASE_URL')
if DATABASE_URL:
    DATABASES['default'] = dj_database_url.config(
        default=DATABASE_URL, 
        conn_max_age=600, 
        # ssl_require should ideally be True in production if DB requires SSL
        ssl_require=os.environ.get('DB_SSL_REQUIRE', 'False') == 'True' 
    )


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
